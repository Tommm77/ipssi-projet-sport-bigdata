{"ast":null,"code":"import axios from 'axios';\n\n// Configuration de base pour Axios\nconst API_BASE_URL = 'http://localhost:8000';\nconst api = axios.create({\n  baseURL: API_BASE_URL,\n  headers: {\n    'Content-Type': 'application/json'\n  }\n});\n\n// Intercepteur pour gérer les erreurs\napi.interceptors.response.use(response => response, error => {\n  console.error('API Error:', error);\n  return Promise.reject(error);\n});\n\n// Fonctions d'API pour les sports\nexport const getSports = async () => {\n  const response = await api.get('/sports');\n  return response.data;\n};\nexport const getSport = async sportId => {\n  const response = await api.get(`/sports/${sportId}`);\n  return response.data;\n};\n\n// Fonctions d'API pour les matchs\nexport const getMatchs = async (params = {}) => {\n  const response = await api.get('/matchs', {\n    params\n  });\n  return response.data;\n};\nexport const getMatch = async matchId => {\n  const response = await api.get(`/matchs/${matchId}`);\n  return response.data;\n};\n\n// Fonctions d'API pour les utilisateurs\nexport const getUsers = async () => {\n  const response = await api.get('/users');\n  return response.data;\n};\nexport const getUser = async userId => {\n  const response = await api.get(`/users/${userId}`);\n  return response.data;\n};\n\n// Fonctions d'API pour les notifications\nexport const getNotifications = async userId => {\n  const params = userId ? {\n    user_id: userId\n  } : {};\n  const response = await api.get('/notifications', {\n    params\n  });\n  return response.data;\n};\n\n// Fonctions d'API pour les statistiques\nexport const getSportsStats = async () => {\n  const response = await api.get('/stats/sports');\n  return response.data;\n};\nexport const getMatchsStats = async () => {\n  const response = await api.get('/stats/matchs');\n  return response.data;\n};\n\n// Fonctions d'API pour Airflow\nexport const getAirflowDags = async () => {\n  const response = await api.get('/airflow/dags');\n  return response.data;\n};\nexport const triggerDag = async (dagId, runId = null) => {\n  const response = await api.post('/airflow/trigger_dag', {\n    dag_id: dagId,\n    run_id: runId\n  });\n  return response.data;\n};\n\n// Fonction pour vérifier l'état des services\nexport const getServicesHealth = async () => {\n  const response = await api.get('/healthcheck');\n  return response.data;\n};\nexport default api;","map":{"version":3,"names":["axios","API_BASE_URL","api","create","baseURL","headers","interceptors","response","use","error","console","Promise","reject","getSports","get","data","getSport","sportId","getMatchs","params","getMatch","matchId","getUsers","getUser","userId","getNotifications","user_id","getSportsStats","getMatchsStats","getAirflowDags","triggerDag","dagId","runId","post","dag_id","run_id","getServicesHealth"],"sources":["/app/src/services/api.js"],"sourcesContent":["import axios from 'axios';\n\n// Configuration de base pour Axios\nconst API_BASE_URL = 'http://localhost:8000';\n\nconst api = axios.create({\n  baseURL: API_BASE_URL,\n  headers: {\n    'Content-Type': 'application/json'\n  }\n});\n\n// Intercepteur pour gérer les erreurs\napi.interceptors.response.use(\n  response => response,\n  error => {\n    console.error('API Error:', error);\n    return Promise.reject(error);\n  }\n);\n\n// Fonctions d'API pour les sports\nexport const getSports = async () => {\n  const response = await api.get('/sports');\n  return response.data;\n};\n\nexport const getSport = async (sportId) => {\n  const response = await api.get(`/sports/${sportId}`);\n  return response.data;\n};\n\n// Fonctions d'API pour les matchs\nexport const getMatchs = async (params = {}) => {\n  const response = await api.get('/matchs', { params });\n  return response.data;\n};\n\nexport const getMatch = async (matchId) => {\n  const response = await api.get(`/matchs/${matchId}`);\n  return response.data;\n};\n\n// Fonctions d'API pour les utilisateurs\nexport const getUsers = async () => {\n  const response = await api.get('/users');\n  return response.data;\n};\n\nexport const getUser = async (userId) => {\n  const response = await api.get(`/users/${userId}`);\n  return response.data;\n};\n\n// Fonctions d'API pour les notifications\nexport const getNotifications = async (userId) => {\n  const params = userId ? { user_id: userId } : {};\n  const response = await api.get('/notifications', { params });\n  return response.data;\n};\n\n// Fonctions d'API pour les statistiques\nexport const getSportsStats = async () => {\n  const response = await api.get('/stats/sports');\n  return response.data;\n};\n\nexport const getMatchsStats = async () => {\n  const response = await api.get('/stats/matchs');\n  return response.data;\n};\n\n// Fonctions d'API pour Airflow\nexport const getAirflowDags = async () => {\n  const response = await api.get('/airflow/dags');\n  return response.data;\n};\n\nexport const triggerDag = async (dagId, runId = null) => {\n  const response = await api.post('/airflow/trigger_dag', {\n    dag_id: dagId,\n    run_id: runId\n  });\n  return response.data;\n};\n\n// Fonction pour vérifier l'état des services\nexport const getServicesHealth = async () => {\n  const response = await api.get('/healthcheck');\n  return response.data;\n};\n\nexport default api; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}